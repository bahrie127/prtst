/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrameClient.java
 *
 * by Saiful Bahri
 * http://bahrie27.wordpress.com/
 * twitter : @bahrie127
 *
 * Created on Dec 2, 2011, 9:40:25 PM
 */
package pretest.client.frame;

import java.awt.CardLayout;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import pretest.client.util.KonekListener;
import pretest.client.util.LoginListener;
import pretest.client.util.PilihSoalListener;
import pretest.client.util.SelesaiListener;
import pretest.entity.Mahasiswa;
import pretest.entity.PertemuanPraktikum;
import pretest.entity.Setting;
import pretest.service.BsPretestService;
import pretest.service.MahasiswaService;
import pretest.service.McPretestService;
import pretest.service.PraktikumService;

public class MainFrameClient extends javax.swing.JFrame {

    private static BsPretestService bsPretestService;
    private static MahasiswaService mahasiswaService;
    private static McPretestService mcPretestService;
    private static PraktikumService praktikumService;
    private String ip = "";
    private static Registry registry;

    /** Creates new form MainFrameClient */
    public MainFrameClient() {
        
            initComponents();
            initPanelKonek();
            initPanelLogin();
            initPanelPilihSoal();
            initPanelSelesai();
            
       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLogin = new pretest.client.panel.PanelLogin();
        panelPilihSoal = new pretest.client.panel.PanelPilihSoal();
        panelTestBs = new pretest.client.panel.PanelTestBs();
        panelTestMc = new pretest.client.panel.PanelTestMc();
        panelSelesai = new pretest.client.panel.PanelSelesai();
        panelHeder = new javax.swing.JPanel();
        panelMain = new javax.swing.JPanel();
        panelKoneksi = new pretest.client.panel.PanelKoneksi();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pretest Client");

        javax.swing.GroupLayout panelHederLayout = new javax.swing.GroupLayout(panelHeder);
        panelHeder.setLayout(panelHederLayout);
        panelHederLayout.setHorizontalGroup(
            panelHederLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        panelHederLayout.setVerticalGroup(
            panelHederLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );

        panelMain.setLayout(new java.awt.CardLayout());
        panelMain.add(panelKoneksi, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHeder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrameClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelHeder;
    private pretest.client.panel.PanelKoneksi panelKoneksi;
    private pretest.client.panel.PanelLogin panelLogin;
    private javax.swing.JPanel panelMain;
    private pretest.client.panel.PanelPilihSoal panelPilihSoal;
    private pretest.client.panel.PanelSelesai panelSelesai;
    private pretest.client.panel.PanelTestBs panelTestBs;
    private pretest.client.panel.PanelTestMc panelTestMc;
    // End of variables declaration//GEN-END:variables
    private static Mahasiswa mahasiswa;

    private void showCardLayout(JPanel component, String cardName) {
        panelMain.removeAll();
        panelMain.add(component, cardName);
        ((CardLayout) panelMain.getLayout()).first(panelMain);
    }

    private void initPanelLogin() {
        LoginListener listener = new LoginListener() {

            @Override
            public void login(Mahasiswa mhs) {
                try {
                    //mahasiswa=mhs;
                    panelPilihSoal.setMhs(mhs);
                    showPanelPilihSoal();
                } catch (RemoteException ex) {
                    Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        panelLogin.setListener(listener);
    }

    private void initPanelKonek() {
        KonekListener listener = new KonekListener() {

            @Override
            public void konek(String ip) {
                try {
                    registry = LocateRegistry.getRegistry(ip, 4562);
                    showPanelLogin();
                } catch (RemoteException ex) {
                    Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        panelKoneksi.setListener(listener);
    }

    private void initPanelPilihSoal() {
        PilihSoalListener listener = new PilihSoalListener() {

            @Override
            public void pilihSoal(String pilih, PertemuanPraktikum pp,Mahasiswa mhs,Setting setting) {
                if (pilih.equals("BS")) {
                    try {
                        panelTestBs.setPertemuanPraktikum(pp,mhs,setting);
                        showPanelTestBs();
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        panelTestMc.setPertemuanPraktikum(pp,mhs,setting);
                        showPanelTestMc();
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        panelPilihSoal.setListener(listener);
    }
    
    private void initPanelSelesai(){
        SelesaiListener listener=new SelesaiListener() {

            @Override
            public void selesai(double nilai) {
                panelSelesai.setNilai(nilai);
                showPanelSelesai();
            }
        };
        panelTestBs.setListener(listener);
        panelTestMc.setListener(listener);
    }

    private void showPanelLogin() {
        //this.ip=ip;
        showCardLayout(panelLogin, "cardLogin");
    }

    private void showPanelKoneksi() {
        showCardLayout(panelKoneksi, "cardKoneksi");
    }

    private void showPanelPilihSoal() {

        showCardLayout(panelPilihSoal, "cardPilihSoal");
    }

    private void showPanelTestBs() {
        showCardLayout(panelTestBs, "cardTestBs");
    }

    private void showPanelTestMc() {
        showCardLayout(panelTestMc, "cardTestMc");
    }
    
    private void showPanelSelesai() {
        showCardLayout(panelSelesai, "cardSelesai");
    }

    public static Mahasiswa getMahasiswa() {
        return mahasiswa;
    }

    public static BsPretestService getBsPretestService() {
        try {
            if (registry != null) {
                bsPretestService = (BsPretestService) registry.lookup("bsPretestService");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bsPretestService;
    }

    public static MahasiswaService getMahasiswaService() {
        try {
            if (registry != null) {
                mahasiswaService = (MahasiswaService) registry.lookup("mahasiswaService");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return mahasiswaService;
    }

    public static McPretestService getMcPretestService() {
        try {
            if (registry != null) {
                mcPretestService = (McPretestService) registry.lookup("mcPretestService");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return mcPretestService;
    }

    public static PraktikumService getPraktikumService() {

        try {
            if (registry != null) {
                praktikumService = (PraktikumService) registry.lookup("praktikumService");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(MainFrameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return praktikumService;
    }
}
